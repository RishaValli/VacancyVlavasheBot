import re
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –í–∞—à ID (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID)
ADMIN_ID = 701763164  # –ü—Ä–∏–º–µ—Ä ID, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_VACANCY, SHOW_DESCRIPTION, NAME, AGE, EXPERIENCE, SCHEDULE, CITIZENSHIP, PHONE, METRO, MEDICAL_BOOK, PHOTO, RESUME = range(12)

# –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
vacancies = {
    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä-–∫–∞—Å—Å–∏—Ä": "–û–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞-–∫–∞—Å—Å–∏—Ä–∞...",
    "–ö–∞—Å—Å–∏—Ä-–±–∞—Ä–∏—Å—Ç–∞": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Å—Å–∏—Ä–∞-–±–∞—Ä–∏—Å—Ç—ã...",
    "–°—Ç–∞—Ä—à–∏–π –ø–æ–≤–∞—Ä": "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ä—à–µ–≥–æ –ø–æ–≤–∞—Ä–∞...",
    "–ü–æ–≤–∞—Ä": "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤–∞—Ä–∞...",
    "–†–∞–±–æ—Ç–Ω–∏–∫ –∫—É—Ö–Ω–∏": "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∫—É—Ö–Ω–∏...",
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone: str) -> bool:
    return re.match(r"^\+7\d{10}$", phone) is not None

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –†–∞–¥—ã, —á—Ç–æ –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å —Ä–∞–±–æ—Ç–æ–π –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞:",
        reply_markup=ReplyKeyboardMarkup([[vacancy] for vacancy in vacancies.keys()], one_time_keyboard=True)
    )
    return SELECT_VACANCY

# –í—ã–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
async def select_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_vacancy = update.message.text
    context.user_data['vacancy'] = selected_vacancy

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –∏ "–ù–∞–∑–∞–¥"
    await update.message.reply_text(
        f"–í–∞–∫–∞–Ω—Å–∏—è: {selected_vacancy}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {vacancies[selected_vacancy]}\n\n"
        "–•–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é?",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", "–ù–∞–∑–∞–¥"]], one_time_keyboard=True)
    )
    return SHOW_DESCRIPTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –∏ "–ù–∞–∑–∞–¥"
async def show_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_response = update.message.text

    if user_response == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:",
            reply_markup=ReplyKeyboardMarkup([[vacancy] for vacancy in vacancies.keys()], one_time_keyboard=True)
        )
        return SELECT_VACANCY
    elif user_response == "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è":
        await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        return NAME
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return SHOW_DESCRIPTION

# –í–æ–ø—Ä–æ—Å –æ –∏–º–µ–Ω–∏
async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    return AGE

# –í–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        age = int(update.message.text)  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        context.user_data['age'] = age
        await update.message.reply_text("–ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç?", reply_markup=ReplyKeyboardMarkup([["–û–ø—ã—Ç–∞ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ", "–ú–µ–Ω–µ–µ 1 –≥–æ–¥–∞"], ["1-2 –≥–æ–¥–∞", "–ë–æ–ª–µ–µ 2 –ª–µ—Ç"]], one_time_keyboard=True))
        return EXPERIENCE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25).")
        return AGE

# –í–æ–ø—Ä–æ—Å –æ –æ–ø—ã—Ç–µ
async def experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['experience'] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –¥–ª—è —Å–µ–±—è –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ?", reply_markup=ReplyKeyboardMarkup([["2/2", "5/2"], ["6/1", "–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º", "–¥—Ä—É–≥–æ–π"]], one_time_keyboard=True))
    return SCHEDULE

# –í–æ–ø—Ä–æ—Å –æ –≥—Ä–∞—Ñ–∏–∫–µ
async def schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['schedule'] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–µ —É –≤–∞—Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?")
    return CITIZENSHIP

# –í–æ–ø—Ä–æ—Å –æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–µ
async def citizenship(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['citizenship'] = update.message.text
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7):")
    return PHONE

# –í–æ–ø—Ä–æ—Å –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    phone = update.message.text
    if not is_valid_phone(phone):
        await update.message.reply_text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑.")
        return PHONE
    context.user_data['phone'] = phone
    await update.message.reply_text("–†—è–¥–æ–º —Å –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–µ–π –º–µ—Ç—Ä–æ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?")
    return METRO

# –í–æ–ø—Ä–æ—Å –æ –º–µ—Ç—Ä–æ
async def metro(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['metro'] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –º–µ–¥–∫–Ω–∏–∂–∫–∞ (–¥–µ–π—Å—Ç–≤—É—é—â–∞—è)?", reply_markup=ReplyKeyboardMarkup([["–¥–∞", "–Ω–µ—Ç"]], one_time_keyboard=True))
    return MEDICAL_BOOK

# –í–æ–ø—Ä–æ—Å –æ –º–µ–¥–∫–Ω–∏–∂–∫–µ
async def medical_book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['medical_book'] = update.message.text
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ —Ñ–æ—Ç–æ.")
    return PHOTO

# –í–æ–ø—Ä–æ—Å –æ —Ñ–æ—Ç–æ
async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['photo'] = update.message.photo[-1].file_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ —Ä–µ–∑—é–º–µ (–µ—Å–ª–∏ –µ—Å—Ç—å).", reply_markup=ReplyKeyboardMarkup([["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ", "–ù–µ—Ç —Ä–µ–∑—é–º–µ"]], one_time_keyboard=True))
    return RESUME

# –í–æ–ø—Ä–æ—Å –æ —Ä–µ–∑—é–º–µ
async def resume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.document:  # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç
        context.user_data['resume'] = update.message.document.file_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ä–µ–∑—é–º–µ
    elif update.message.text == "–ù–µ—Ç —Ä–µ–∑—é–º–µ":  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–µ—Ç —Ä–µ–∑—é–º–µ"
        context.user_data['resume'] = None
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç —Ä–µ–∑—é–º–µ'.")
        return RESUME

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—é–º–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await context.bot.send_message(
        chat_id=ADMIN_ID,  # –í–∞—à ID
        text=f"–ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ:\n"
             f"–í–∞–∫–∞–Ω—Å–∏—è: {context.user_data['vacancy']}\n"
             f"–ò–º—è: {context.user_data['name']}\n"
             f"–í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
             f"–û–ø—ã—Ç: {context.user_data['experience']}\n"
             f"–ì—Ä–∞—Ñ–∏–∫: {context.user_data['schedule']}\n"
             f"–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {context.user_data['citizenship']}\n"
             f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
             f"–ú–µ—Ç—Ä–æ: {context.user_data['metro']}\n"
             f"–ú–µ–¥–∫–Ω–∏–∂–∫–∞: {context.user_data['medical_book']}\n"
             f"–†–µ–∑—é–º–µ: {'–ó–∞–≥—Ä—É–∂–µ–Ω–æ' if context.user_data['resume'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
    await context.bot.send_photo(
        chat_id=ADMIN_ID,  # –í–∞—à ID
        photo=context.user_data['photo'],
        caption="–§–æ—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—é–º–µ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ)
    if context.user_data['resume']:
        await context.bot.send_document(
            chat_id=ADMIN_ID,  # –í–∞—à ID
            document=context.user_data['resume'],
            caption="–†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
        )

    context.user_data.clear()
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Ä–µ–∑—é–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /my_id
async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    await update.message.reply_text(f"–í–∞—à ID: {user_id}")

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token("7695919804:AAFoM8xFzyrLHPxvvnvusAFzf_7PR1Tdgno").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /my_id
    application.add_handler(CommandHandler("my_id", my_id))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_VACANCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_vacancy)],
            SHOW_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_description)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, experience)],
            SCHEDULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule)],
            CITIZENSHIP: [MessageHandler(filters.TEXT & ~filters.COMMAND, citizenship)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            METRO: [MessageHandler(filters.TEXT & ~filters.COMMAND, metro)],
            MEDICAL_BOOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, medical_book)],
            PHOTO: [MessageHandler(filters.PHOTO, photo)],
            RESUME: [MessageHandler(filters.TEXT | filters.Document.MimeType("application/pdf"), resume)],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()